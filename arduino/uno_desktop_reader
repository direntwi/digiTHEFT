#include <SPI.h>//include the SPI bus library
#include <MFRC522.h>//include the RFID reader library

#define SS_PIN 10  //slave select pin
#define RST_PIN 9  //reset pin
#define BUZZER_PIN 8
MFRC522 mfrc522(SS_PIN, RST_PIN);        // instatiate a MFRC522 reader object.
MFRC522::MIFARE_Key key;//create a MIFARE_Key struct named 'key', which will hold the card information

// Contains values to be read from the RFID
byte readbackblock[18];

// Block to write to
int blockNumber = 2;
String finalValue = "";
String command = "";
byte writeBlockcontent[6];

byte uid_finder[10];
String uid_string;

const byte numChars = 32;
char receivedChars[numChars]; // an array to store the received data

boolean newData = false;

const byte rled = 7;
const byte gled = 6;

void setup() {
  Serial.begin(9600);        // Initialize serial communications with the PC

  // RFID SETUP
  SPI.begin();               // Init SPI bus
  mfrc522.PCD_Init();        // Init MFRC522 card (in case you wonder what PCD means: proximity coupling device)
  pinMode(8, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(6, OUTPUT);

  // Prepare the security key for the read and write functions - all six key bytes are set to 0xFF at chip delivery from the factory.
  // Since the cards in the kit are new and the keys were never defined, they are 0xFF
  // if we had a card that was programmed by someone else, we would need to know the key to be able to access it. This key would then need to be stored in 'key' instead.

  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;//keyByte is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
  }
}

void loop() {
  // Wait for an RFID card to be read
  if ( ! mfrc522.PICC_IsNewCardPresent()) {//if PICC_IsNewCardPresent returns 1, a new card has been found and we continue
    return;//if it did not find a new card is returns a '0' and we return to the start of the loop
  }


  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) {//if PICC_ReadCardSerial returns 1, the "uid" struct (see MFRC522.h lines 238-45)) contains the ID of the read card.
    return;//if it returns a '0' something went wrong and we return to the start of the loop
  }

  recvWithEndMarker();
  showNewData();

  command.getBytes(writeBlockcontent, 6);

  writeBlock(blockNumber, receivedChars);

  readBlock(blockNumber, readbackblock);

  finalValue = extractReadBlock(readbackblock);

  if (finalValue == "7097108115") { // FALSE
    beepBuzzerRLED();
  } else if (finalValue == "84114117101") { // TRUE
    beepBuzzerGLED();

  } else {
    beepBuzzerBOTHLEDS();
  }

  for (byte i = 0; i < 4; i++) {
    uid_finder[i] = mfrc522.uid.uidByte[i];//keyByte is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
    uid_string = uid_string + String(uid_finder[i]);
  }
  Serial.print(uid_string);
}

void recvWithEndMarker() {
  static byte ndx = 0;
  char endMarker = '\n';
  char rc;

  while (Serial.available() > 0 && newData == false) {
    rc = Serial.read();

    if (rc != endMarker) {
      receivedChars[ndx] = rc;
      ndx++;
      if (ndx >= numChars) {
        ndx = numChars - 1;
      }
    }
    else {
      receivedChars[ndx] = '\0'; // terminate the string
      ndx = 0;
      newData = true;
    }
  }
}


void showNewData() {
  if (newData == true) {
    Serial.println(receivedChars);
    newData = false;
  }
}

void beepBuzzerRLED() {
  tone(BUZZER_PIN, 1000);
  digitalWrite(rled, HIGH);
  delay(1000);
  noTone(BUZZER_PIN);
  digitalWrite(rled, LOW);
}

void beepBuzzerGLED() {
  tone(BUZZER_PIN, 1000);
  digitalWrite(gled, HIGH);
  delay(100);
  noTone(BUZZER_PIN);
  delay(900);
  digitalWrite(gled, LOW);
}

void beepBuzzerBOTHLEDS() {
  digitalWrite(8, HIGH);
  digitalWrite(gled, HIGH);
  digitalWrite(rled, HIGH);
  delay(100);
  digitalWrite(8, LOW);
  digitalWrite(gled, LOW);
  digitalWrite(rled, LOW);
  delay(100);
  digitalWrite(8, HIGH);
  digitalWrite(gled, HIGH);
  digitalWrite(rled, HIGH);
  delay(100);
  digitalWrite(8, LOW);
  digitalWrite(gled, LOW);
  digitalWrite(rled, LOW);
  delay(100);
  digitalWrite(8, HIGH);
  digitalWrite(gled, HIGH);
  digitalWrite(rled, HIGH);
  delay(100);
  digitalWrite(8, LOW);
  digitalWrite(gled, LOW);
  digitalWrite(rled, LOW);
}


String extractReadBlock(byte* readblock) {
  String temp = "";
  for (int j = 0 ; j < 4 ; j++) //print the block contents
  {
    // Adds read value to temp string
    temp += readbackblock[j];
  }

  return temp;

}

// ================================ RFID FUNCTIONS =============================
int writeBlock(int blockNumber, byte arrayAddress[])
{
  //this makes sure that we only write into data blocks. Every 4th block is a trailer block for the access/security info.
  int largestModulo4Number = blockNumber / 4 * 4;
  int trailerBlock = largestModulo4Number + 3; //determine trailer block for the sector
  if (blockNumber > 2 && (blockNumber + 1) % 4 == 0) {
    Serial.print(blockNumber);  //block number is a trailer block (modulo 4); quit and send error code 2
    Serial.println(" is a trailer block:");
    return 2;
  }

  /*****************************************authentication of the desired block for access***********************************************************/
  byte status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
  //byte PCD_Authenticate(byte command, byte blockAddr, MIFARE_Key *key, Uid *uid);
  //this method is used to authenticate a certain block for writing or reading
  //command: See enumerations above -> PICC_CMD_MF_AUTH_KEY_A  = 0x60 (=1100000),    // this command performs authentication with Key A
  //blockAddr is the number of the block from 0 to 15.
  //MIFARE_Key *key is a pointer to the MIFARE_Key struct defined above, this struct needs to be defined for each block. New cards have all A/B= FF FF FF FF FF FF
  //Uid *uid is a pointer to the UID struct that contains the user ID of the card.
  if (status != MFRC522::STATUS_OK) {
    Serial.print("PCD_Authenticate() failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return 3;//return "3" as error message
  }
  //it appears the authentication needs to be made before every block read/write within a specific sector.
  //If a different sector is being authenticated access to the previous one is lost.


  /*****************************************writing the block***********************************************************/

  status = mfrc522.MIFARE_Write(blockNumber, arrayAddress, 16);//valueBlockA is the block number, MIFARE_Write(block number (0-15), byte array containing 16 values, number of bytes in block (=16))
  //status = mfrc522.MIFARE_Write(9, value1Block, 16);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("MIFARE_Write() failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return 4;//return "4" as error message
  }
}


int readBlock(int blockNumber, byte arrayAddress[])
{
  int largestModulo4Number = blockNumber / 4 * 4;
  int trailerBlock = largestModulo4Number + 3; //determine trailer block for the sector

  /*****************************************authentication of the desired block for access***********************************************************/
  byte status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
  //byte PCD_Authenticate(byte command, byte blockAddr, MIFARE_Key *key, Uid *uid);
  //this method is used to authenticate a certain block for writing or reading
  //command: See enumerations above -> PICC_CMD_MF_AUTH_KEY_A = 0x60 (=1100000),    // this command performs authentication with Key A
  //blockAddr is the number of the block from 0 to 15.
  //MIFARE_Key *key is a pointer to the MIFARE_Key struct defined above, this struct needs to be defined for each block. New cards have all A/B= FF FF FF FF FF FF
  //Uid *uid is a pointer to the UID struct that contains the user ID of the card.
  if (status != MFRC522::STATUS_OK) {
    Serial.print("PCD_Authenticate() failed (read): ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return 3;//return "3" as error message
  }
  //it appears the authentication needs to be made before every block read/write within a specific sector.
  //If a different sector is being authenticated access to the previous one is lost.


  /*****************************************reading a block***********************************************************/

  byte buffersize = 18;//we need to define a variable with the read buffer size, since the MIFARE_Read method below needs a pointer to the variable that contains the size...
  status = mfrc522.MIFARE_Read(blockNumber, arrayAddress, &buffersize);//&buffersize is a pointer to the buffersize variable; MIFARE_Read requires a pointer instead of just a number
  if (status != MFRC522::STATUS_OK) {
    Serial.print("MIFARE_read() failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return 4;//return "4" as error message
  }
}
